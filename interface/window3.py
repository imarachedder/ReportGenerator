# Form implementation generated from reading ui file 'C:\Users\sibregion\Pictures\window3.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QProgressBar

from interface.preview import Preview
from interface.json_worker import JsonWorker
from settings import path_icon_done, path_icon_not_done
from write_excel_description import WriterExcelTP, WriterApplicationCityTP


class Ui_MainWindow3(object):
    def setupUi (self, MainWindow3):
        MainWindow3.setObjectName("MainWindow3")
        MainWindow3.resize(800, 600)
        MainWindow3.setMaximumSize(QtCore.QSize(800, 600))
        self.centralwidget = QtWidgets.QWidget(parent = MainWindow3)
        self.centralwidget.setMaximumSize(QtCore.QSize(800, 600))
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_6.setContentsMargins(-1, 9, -1, 1)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.tabWidget = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tabWidget.setTabletTracking(True)
        self.tabWidget.setAcceptDrops(False)
        self.tabWidget.setAutoFillBackground(True)
        self.tabWidget.setStyleSheet("QTabBar::tab\n"
"{\n"
"background-color:rgba(255, 48, 12,100);\n"
"\n"
"}\n"
"\n"
"QTabBar::tab:selected\n"
"{\n"
"background-color:rgb(255,255,255)\n"
"}")
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.TabPosition.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.tabWidget.setElideMode(QtCore.Qt.TextElideMode.ElideNone)
        self.tabWidget.setUsesScrollButtons(True)
        self.tabWidget.setDocumentMode(True)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setMovable(False)
        self.tabWidget.setTabBarAutoHide(True)
        self.tabWidget.setObjectName("tabWidget")
        self.tab1 = QtWidgets.QWidget()

        self.icon_tab1 = QtGui.QIcon()
        self.icon_tab1.addPixmap(QtGui.QPixmap(path_icon_not_done),
                                 QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)

        self.tab1.setObjectName("tab1")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.tab1)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.plainTextEdit_1 = QtWidgets.QPlainTextEdit(parent = self.tab1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred,
                                           QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.plainTextEdit_1.sizePolicy().hasHeightForWidth())
        self.plainTextEdit_1.setSizePolicy(sizePolicy)
        self.plainTextEdit_1.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.plainTextEdit_1.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.plainTextEdit_1.setBackgroundVisible(False)
        self.plainTextEdit_1.setCenterOnScroll(True)
        self.plainTextEdit_1.setObjectName("plainTextEdit_1")
        self.verticalLayout_2.addWidget(self.plainTextEdit_1)

        self.tabWidget.addTab(self.tab1, self.icon_tab1, "Краткая истоическая справка")
        self.tab_2 = QtWidgets.QWidget()
        self.icon_tab2 = QtGui.QIcon()

        self.icon_tab2.addPixmap(
            QtGui.QPixmap(path_icon_not_done),
            QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)

        self.tab_2.setObjectName("tab_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.tab_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(parent = self.tab_2)
        self.plainTextEdit_2.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.plainTextEdit_2.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        self.verticalLayout_3.addWidget(self.plainTextEdit_2)
        self.tabWidget.addTab(self.tab_2, self.icon_tab2, "Связь дороги с железнодорожными и водными путями")
        self.tab_3 = QtWidgets.QWidget()

        self.icon_tab3 = QtGui.QIcon()
        self.icon_tab3.addPixmap(
            QtGui.QPixmap(path_icon_not_done),
            QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)

        self.tab_3.setObjectName("tab_3")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.tab_3)
        self.verticalLayout.setObjectName("verticalLayout")
        self.plainTextEdit_3 = QtWidgets.QPlainTextEdit(parent = self.tab_3)
        self.plainTextEdit_3.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.plainTextEdit_3.setObjectName("plainTextEdit_3")
        self.verticalLayout.addWidget(self.plainTextEdit_3)
        self.tabWidget.addTab(self.tab_3, self.icon_tab3, "Экономическое и административное занчение дороги")
        self.tab_4 = QtWidgets.QWidget()
        self.icon_tab4 = QtGui.QIcon()
        self.icon_tab4.addPixmap(
            QtGui.QPixmap(path_icon_not_done),
            QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.tab_4.setObjectName("tab_4")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.tab_4)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.plainTextEdit_4 = QtWidgets.QPlainTextEdit(parent = self.tab_4)
        self.plainTextEdit_4.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.plainTextEdit_4.setObjectName("plainTextEdit_4")
        self.verticalLayout_5.addWidget(self.plainTextEdit_4)
        self.tabWidget.addTab(self.tab_4, self.icon_tab4, "Характеристика движения")
        self.tab_5 = QtWidgets.QWidget()
        self.icon_tab5 = QtGui.QIcon()
        self.icon_tab5.addPixmap(
            QtGui.QPixmap(path_icon_not_done),
            QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.tab_5.setObjectName("tab_5")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.tab_5)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.plainTextEdit_5 = QtWidgets.QPlainTextEdit(parent = self.tab_5)
        self.plainTextEdit_5.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.plainTextEdit_5.setBackgroundVisible(False)
        self.plainTextEdit_5.setCenterOnScroll(False)
        self.plainTextEdit_5.setObjectName("plainTextEdit_5")
        self.verticalLayout_4.addWidget(self.plainTextEdit_5)
        self.tabWidget.addTab(self.tab_5, "")
        self.verticalLayout_6.addWidget(self.tabWidget)
        self.horizontalGroupBox = QtWidgets.QGroupBox(parent=self.centralwidget)
        self.horizontalGroupBox.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalGroupBox.sizePolicy().hasHeightForWidth())
        self.horizontalGroupBox.setSizePolicy(sizePolicy)
        self.horizontalGroupBox.setMinimumSize(QtCore.QSize(17, 17))
        self.horizontalGroupBox.setMaximumSize(QtCore.QSize(800, 208))
        self.horizontalGroupBox.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.horizontalGroupBox.setMouseTracking(False)
        self.horizontalGroupBox.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.horizontalGroupBox.setAutoFillBackground(False)
        self.horizontalGroupBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.horizontalGroupBox.setFlat(False)
        self.horizontalGroupBox.setCheckable(False)
        self.horizontalGroupBox.setChecked(False)
        self.horizontalGroupBox.setObjectName("horizontalGroupBox")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalGroupBox)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.back_pushButton = QtWidgets.QPushButton(parent=self.horizontalGroupBox)
        self.back_pushButton.setObjectName("back_pushButton")
        self.horizontalLayout.addWidget(self.back_pushButton)
        self.progressBar = QtWidgets.QProgressBar(parent=self.horizontalGroupBox)
        self.progressBar.setMaximumSize(QtCore.QSize(725, 16777215))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(True)
        self.progressBar.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.progressBar.setInvertedAppearance(False)
        self.progressBar.setObjectName("progressBar")
        self.horizontalLayout.addWidget(self.progressBar)
        self.done_pushButton = QtWidgets.QPushButton(parent=self.horizontalGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.done_pushButton.sizePolicy().hasHeightForWidth())
        self.done_pushButton.setEnabled(False)
        self.done_pushButton.setSizePolicy(sizePolicy)
        self.done_pushButton.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.done_pushButton.setObjectName("done_pushButton")
        self.horizontalLayout.addWidget(self.done_pushButton)
        self.verticalLayout_6.addWidget(self.horizontalGroupBox)
        # self.back_pushButton = QtWidgets.QPushButton(parent = self.tab_5)
        # sizePolicy.setHeightForWidth(self.back_pushButton.sizePolicy().hasHeightForWidth())
        # self.back_pushButton.setSizePolicy(sizePolicy)
        # self.back_pushButton.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        # self.back_pushButton.setObjectName("back_pushButton")
        # self.verticalLayout_4.addWidget(self.back_pushButton)
        #
        # self.tabWidget.addTab(self.tab_5, self.icon_tab5, "Топографические условия района")
        # self.horizontalLayout.addWidget(self.tabWidget)
        MainWindow3.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow3)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow3)

    def retranslateUi (self, MainWindow3):
        _translate = QtCore.QCoreApplication.translate
        MainWindow3.setWindowTitle(_translate("MainWindow3", "Дорога \"Название дороги\""))
        self.plainTextEdit_1.setPlaceholderText(_translate("MainWindow3", "Заполните описание"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab1),
                                  _translate("MainWindow3", "Краткая историческая справка"))
        self.plainTextEdit_2.setPlaceholderText(_translate("MainWindow3", "Заполните описание"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2),
                                  _translate("MainWindow3", "Связь дороги с железнодорожными и водными путями"))
        self.plainTextEdit_3.setPlaceholderText(_translate("MainWindow3", "Заполните описание"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3),
                                  _translate("MainWindow3", "Экономическое и административное занчение дороги"))
        self.plainTextEdit_4.setPlaceholderText(_translate("MainWindow3", "Заполните описание"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4),
                                  _translate("MainWindow3", "Характеристика движения"))
        self.plainTextEdit_5.setPlaceholderText(_translate("MainWindow3", "Заполните описание"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("MainWindow3", "Топографические условия района"))
        self.back_pushButton.setText(_translate("MainWindow3", "Назад"))
        self.done_pushButton.setText(_translate("MainWindow3", "Готово"))

class Window3(QtWidgets.QMainWindow, Ui_MainWindow3, JsonWorker):
    def __init__ (self, title=None, parent=None, data = None, path = r'C:\Users\sibregion\Desktop'):
        # Это здесь нужно для доступа к переменным, методам
        # и т.д. в файле design.py
        super(Window3, self).__init__(parent)
        self.parent = parent
        self.path_dir = path
        print(self.path_dir)
        self.info = None
        self.setupUi(self)  # Это нужно для инициализации нашего дизайна
        self.setWindowTitle(title)
        self.data = data
        self.icon_done = (QtGui.QPixmap(path_icon_done), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.icon_not_done = (QtGui.QPixmap(path_icon_not_done), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)

        self.plainTextEdit_1.textChanged.connect(
            lambda: self.check_empty_plain_text_edit(self.plainTextEdit_1, self.icon_tab1, 0))
        self.plainTextEdit_2.textChanged.connect(
            lambda: self.check_empty_plain_text_edit(self.plainTextEdit_2, self.icon_tab2, 1))
        self.plainTextEdit_3.textChanged.connect(
            lambda: self.check_empty_plain_text_edit(self.plainTextEdit_3, self.icon_tab3, 2))
        self.plainTextEdit_4.textChanged.connect(
            lambda: self.check_empty_plain_text_edit(self.plainTextEdit_4, self.icon_tab4, 3))
        self.plainTextEdit_5.textChanged.connect(
            lambda: self.check_empty_plain_text_edit(self.plainTextEdit_5, self.icon_tab5, 4))

        self.back_pushButton.clicked.connect(self.back_to_window)
        #
        #self.done_pushButton.clicked.connect(self.preview_window)
        self.done_pushButton.clicked.connect(lambda: self.write_excel(data=self.data, data_interface = self.get_info_from_plain_text_edit()))
        self.set_plain_text_edit(self.read_json_file_info())

    def write_excel (self, data=None, data_interface = None):
        if data is None:
            data = {}
        if self.parent.tp_checkBox.isChecked():
            print('заполняю тех паспорт')
            print("Вхожу в ", self.path_dir)
            WriterExcelTP(data = data, path=self.path_dir, data_interface=data_interface, parent=self)
            #report.save_file()
            print('заполняю приложение')
            WriterApplicationCityTP(data=data, path = self.path_dir, data_interface=data_interface, parent=self)
            #apps.save_file()
            print('сохранил файл')

    def check_empty_plain_text_edit(self, obj_plainTextEdit, obj_icon_tab, idx):
        if obj_plainTextEdit.toPlainText() != '':
            obj_icon_tab.addPixmap(self.icon_done[0], self.icon_done[1], self.icon_done[2])
            self.tabWidget.setTabIcon(idx, obj_icon_tab)
        else:
            obj_icon_tab.addPixmap(self.icon_not_done[0], self.icon_not_done[1], self.icon_not_done[2])
            self.tabWidget.setTabIcon(idx, obj_icon_tab)

    def get_info_from_plain_text_edit(self):
        history_match = self.plainTextEdit_1.toPlainText()
        railway_waterway = self.plainTextEdit_2.toPlainText()
        economical_characteristic_road = self.plainTextEdit_3.toPlainText()
        movement_characteristic = self.plainTextEdit_4.toPlainText()
        area_conditions = self.plainTextEdit_5.toPlainText()
        return {'history_match': history_match,
                'railway_waterway': railway_waterway,
                'economical_characteristic_road': economical_characteristic_road,
                'movement_characteristic': movement_characteristic,
                'area_conditions': area_conditions} | self.parent.get_info_window2()

    def set_plain_text_edit(self, data: dict):
        self.plainTextEdit_1.setPlainText(data.get('history_match', ''))
        self.plainTextEdit_2.setPlainText(data.get('railway_waterway', ''))
        self.plainTextEdit_3.setPlainText(data.get('economical_characteristic_road', ''))
        self.plainTextEdit_4.setPlainText(data.get('movement_characteristic', ''))
        self.plainTextEdit_5.setPlainText(data.get('area_conditions', ''))

    def back_to_window(self):
        """
        Закрытие окна
        :return:
        """
        # ДОПИСАТЬ json_worker
        self.write_json_file_info(self.get_info_from_plain_text_edit())
        self.parent.show()
        self.close()

    #отключил превью окно
    def preview_window(self):

        data_interface = self.get_info_from_plain_text_edit()

        self.write_json_file_info(data_interface)
        self.preview = Preview(title = self.windowTitle(), parent = self, data=self.data, path_dir = self.path_dir,
                               data_interface = data_interface)
        self.preview.filling_templates(data_interface)
        # self.preview.write_excel(data)
        self.preview.show()


def main():
    app = QtWidgets.QApplication(sys.argv)  # Новый экземпляр QApplication
    window = Window3()  # Создаём объект класса ExampleApp
    window.show()  # Показываем окно
    app.exec()  # и запускаем приложение


if __name__ == '__main__':  # Если мы запускаем файл напрямую, а не импортируем
    main()  # то запускаем функцию main()
